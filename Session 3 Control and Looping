Jumping on the Clouds
QUESTION DESCRIPTION

Emma is playing a new mobile game involving n clouds numbered from 0 to n-1 . A player initially starts out on cloud c0, and they must jump to cloud cn-1. In each step, she can jump from any cloud i to cloud i+1 or cloud i+2 .

There are two types of clouds, ordinary clouds and thunderclouds. The game ends if Emma jumps onto a thundercloud, but if she reaches the last cloud (i.e.,cn-1 ), she wins the game!

Can you find the minimum number of jumps Emma must make to win the game? It is guaranteed that clouds c0 and cn-1 are ordinary-clouds and it is always possible to win the game.

Input Format

The first line contains an integer, (the total number of clouds).

The second line contains space-separated binary integers describing clouds .

If ci=0 , the ith cloud is an ordinary cloud.

If ci=1 , the ith cloud is a thundercloud.

Constraints

2 <= n < 100
ci belongs {0,1}
c0 = cn-1=0

Output Format

Print the minimum number of jumps needed to win the game.
TEST CASE 1

INPUT
7
0 0 1 0 0 1 0
OUTPUT
4
TEST CASE 2

INPUT
6
0 0 0 0 1 0
OUTPUT
3
##############CODE###############
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
public class TestClass {
public static void main(String[] args) {
 Scanner in = new Scanner(System.in);
 int n = in.nextInt();
 int c[] = new int[n];
 for(int c_i=0; c_i < n; c_i++){
 c[c_i] = in.nextInt();
 }
  findMinimumJumps(c);
 }
  public static void findMinimumJumps(int[] arr){
 int count = 0;
 int i = 0;
 while(i < arr.length-1){
 if(i+2 < arr.length && arr[i + 2] == 0){
 i = i + 2;
 count++;
 }
 else{
 i++;
 count++;
 }
 }
 System.out.println(count);
 }
}
------------------------------------------------------------------------------------
PATTERNS - L9
QUESTION DESCRIPTION

Write a java program to display the following patterns
TEST CASE 1

INPUT
7
OUTPUT
1 
1 2 1 
1 2 3 2 1 
1 2 3 4 3 2 1 
1 2 3 4 5 4 3 2 1 
1 2 3 4 5 6 5 4 3 2 1 
1 2 3 4 5 6 7 6 5 4 3 2 1
TEST CASE 2

INPUT
4
OUTPUT
1 
1 2 1 
1 2 3 2 1 
1 2 3 4 3 2 1
###############CODE###############
import java.util.*;
 public class TestClass
{
   public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        for (int i = 1; i <= rows; i++) {
        for (int j = 1; j <= i; j++) 
        { 
        System.out.print(j+" "); 
        }
        for (int j = i-1; j >= 1; j--)
        {
        System.out.print(j+" ");
        }
        System.out.println();
        }
        sc.close();
    }
}
--------------------------------------------------------------------------
Compare two strings lexicographically
QUESTION DESCRIPTION

Write a java program to compare two strings lexicographically

If the strings are equal then mentions as follows:

Input 1:

SRM
SRM

Output:

SRM is equal to SRM
TEST CASE 1

INPUT
SRM UNIVERSITY
SRM
OUTPUT
SRM UNIVERSITY is greater than SRM
TEST CASE 2

INPUT
SRM
SRM UNIVERSITY
OUTPUT
SRM is less than SRM UNIVERSITY
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass {
	 public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
       String s1=sc.nextLine();
       String s2=sc.nextLine();
       int res=s1.compareTo(s2);
       if (res>0)
         System.out.println(s1+ " is greater than " + s2);
       else if (res<0)
         System.out.println(s1+ " is less than " + s2);
       else
         System.out.println(s1+ " is equal to " + s2);
	}
}
-----------------------------------------------------------------------
Radius of Earth
QUESTION DESCRIPTION

Write a Java program to compute the distance between two points on the surface of earth.

x1 = Math.toRadians(lat1)
y1 = Math.toRadians(lon1)
x2 = Math.toRadians(lat2)
x3 = Math.toRadians(lon2)

Distance between the two points [ (x1,y1) & (x2,y2)]

d = radius * arccos(sin(x1) * sin(x2) + cos(x1) * cos(x2) * cos(y1 - y2))

Radius of the earth r = 6371.01 Kilometers

Mandatory:

1. Create a new class "Sample" and a method named "distanceBetweenTwoPoints()" of type double

2. The method should take four arguments with double data type

public double distanceBetweenTwoPoints(double lat1, double lon1, double lat2, double lon2)

Methodname = distanceBetweenTwoPoints
Argument = Four Arguments - double lat1, double lon1, double lat2, double lon2 of type double with variable names mentioned in the argument
Access Specifier = public
Return Type = double


3. Access the method "public double distanceBetweenTwoPoints(double lat1,double lon1,double lat2,double lon2)" inside the main method under main class (TestClass)

4. Use return to pass the final value computed in distanceBetweenTwoPoints to the main method

5. The final answer should be rounded using String.format("%.02f", variablename)

TEST CASE 1

INPUT
25 35 35.5 25.5
OUTPUT
1480.08
TEST CASE 2

INPUT
12 28 13.5 12.3
OUTPUT
1710.55
###############CODE###############
import java.io.*;
import java.util.Scanner;
class Sample{
	public double distanceBetweenTwoPoints(double lat1,double lon1,double lat2,double lon2){
    	double x1=Math.toRadians(lat1);
      	double y1=Math.toRadians(lon1);
      	double x2=Math.toRadians(lat2);
      	double y2=Math.toRadians(lon2);
      	double radiusEarth=6371.01;
        double d=radiusEarth*Math.acos(Math.sin(x1)*Math.sin(x2)+Math.cos(x1)*Math.cos(x2)*Math.cos(y1-y2));
      	return d;
    }
}
public class TestClass {
	 public static void main(String[] args) { 
		Sample s=new Sample();
        Scanner sc=new Scanner(System.in);
        double distance=s.distanceBetweenTwoPoints(sc.nextDouble(),sc.nextDouble(),sc.nextDouble(),sc.nextDouble());
        System.out.println(String.format("%.02f",distance));
	}
} 
----------------------------------------------------------------------------------------------------------
Swapping
QUESTION DESCRIPTION

Swap two number using bitwise

Note:
Use ^ (XOR) operator for this.operator
TEST CASE 1

INPUT
23
45
OUTPUT
After Swap i=45 j=23
TEST CASE 2

INPUT
12
3
OUTPUT
After Swap i=3 j=12
###############CODE###############
import java.util.*;  
public class TestClass{  
public static void main(String args[])  
{  
int i, j;  
Scanner scanner = new Scanner(System.in);  
i = scanner.nextInt();  
j = scanner.nextInt();  
i = i ^ j;  
j = i ^ j;  
i = i ^ j;  
System.out.println("After Swap i=" +i +" j=" +j);  

}  
}
-----------------------------------------------------------------------------
PATTERNS - L17
QUESTION DESCRIPTION

Write a java program to display the following patterns
TEST CASE 1

INPUT
5
OUTPUT
1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15
TEST CASE 2

INPUT
6
OUTPUT
1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 21
###############CODE###############
import java.util.*;
  
public class TestClass 
{    
    public static void main(String[] args) 
    {
      Scanner sc = new Scanner(System.in);
      int noOfRows = sc.nextInt();
      int value = 1;
      for (int i=1;i<=noOfRows;i++) 
      {
        for (int j=1; j<=i;j++) 
        {
          System.out.print(value+" ");
          value++;
        }
        System.out.println();
        }
    }    
}
-----------------------------------------------------------------------------------------------
progressive sequence
QUESTION DESCRIPTION

A sequence is said to be progressive if it doesnt decrease at any point in time. For example 1 1 2 2 is a progressive sequence but 1 2 1 is not a progressive sequence. Let S be the sequence and be represented by L spaced integers Ki, now your task is to find out the first longest progressive sequence present in the given sequence (S).

Input Format:
First line will contain T, the length of the sequence and next line will contain T spaced integers Ki (where i = 0,1, ,L).
Line 1 T,where T is the length of the sequence Line 2 Ki,where Ki is integer in sequence separated by space
Constraints: 1<=T<=10^6(one million) 1<=Ki<=10^9(one billion)

Output Format: Line 1 longest progressive sequence present in the given sequence.
TEST CASE 1

INPUT
5
4 1 1 2 1
OUTPUT
1 1 2
TEST CASE 2

INPUT
5
4 1 3 1 2
OUTPUT
1 3
###############CODE###############
import java.util.ArrayList;
import java.util.Scanner;

public class TestClass {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        ArrayList<Integer> ls = new ArrayList<Integer>();
        Integer[] temp = new Integer[0];
        for (int i = 0; i < t; i++) {
            int num = sc.nextInt();
            if (!(ls.isEmpty())) {
                if (num >=ls.get(ls.size()-1 )) {
                    
                    ls.add(num);
                } else {
                   
                    if(ls.size()>temp.length)
                    temp=ls.toArray(temp);
                    ls.clear();
                    ls.add(num);
                }
                
            } else {
                ls.add(num);
            }
        }
      
        if(ls.size()>temp.length)
        {
            temp=ls.toArray(temp);
        ls.clear();
        }
            for (int i = 0; i < temp.length; i++) {
            if(i<temp.length-1)
            System.out.print(temp[i]+" ");
            else
                System.out.println(temp[i]);

        }
        
    }
}
-------------------------------------------------------------------------------------------------
PALINDROME OR NOT
QUESTION DESCRIPTION

Java program to Read Number from Console and Check if it is a Palindrome Number
TEST CASE 1

INPUT
121
OUTPUT
121 is a palindrome number
TEST CASE 2

INPUT
625
OUTPUT
625 is not a palindrome number
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass
{
    public static void main(String args[])
    {
        int num, rem, orig, rev=0;
        Scanner scan = new Scanner(System.in);
		
        System.out.print(" ");
        num = scan.nextInt();
		
        orig = num;
		
        while(num != 0)
        {
            rem = num%10;
            rev = rev*10 + rem;
            num = num/10;
        }
        
        
        if(rev==orig)
        {
            System.out.print(""+orig+" is a palindrome number ");
        }
        else
        {
            System.out.print(""+orig+ " is not a palindrome number");
        }
    }
}
-----------------------------------------------------------------------------------
GCD AND LCM
QUESTION DESCRIPTION

Java Program to Find the GCD and LCM of two Numbers
TEST CASE 1

INPUT
15
25
OUTPUT
The GCD of two numbers is: 5
The LCM of two numbers is: 75
TEST CASE 2

INPUT
5
8
OUTPUT
The GCD of two numbers is: 1
The LCM of two numbers is: 40
###############CODE###############
import java.io.*;
import java.util.*;
public class TestClass{
  public static void main(String[] args){
    int n1,n2;
    int gcd,lcm,remainder,numerator,denominator;
    Scanner sc = new Scanner(System.in);
    n1 = sc.nextInt();
    n2 = sc.nextInt();
    if(n1>n2)
    {
      numerator=n1;
      denominator=n2;
    }else{
      numerator=n2;
      denominator=n1;
    }
    remainder=numerator%denominator;
    while(remainder!=0)
    {
      numerator=denominator;
      denominator=remainder;
      remainder=numerator%denominator;
    }
    gcd=denominator;
    lcm=n1*n2/gcd;
    System.out.println("The GCD of two numbers is: "+gcd);
    System.out.println("The LCM of two numbers is: "+lcm);
  }
}
---------------------------------------------------------------------------
PATTERN 3 - CL2
QUESTION DESCRIPTION

"Write a java program to display the following patterns
"
TEST CASE 1

INPUT
5
OUTPUT
*
**
***
****
*****
TEST CASE 2

INPUT
4
OUTPUT
*
**
***
****
###############CODE###############
import java.io.*;
import java.util.*;
public class TestClass {
	 public static void main(String[] args) { 
       int i,j,row;
       Scanner sc = new Scanner(System.in);
       row = sc.nextInt();
       for(i=0;i<row;i++)
       {
         for(j=0;j<=i;j++)
         {
           System.out.print("*");
         }
         System.out.println();
       }
		
	}
}
---------------------------------------------------------------
Number of Ways to Write a Number
QUESTION DESCRIPTION

Java Program to Find the Number of Ways to Write a Number as the Sum of Numbers Smaller than Itself
TEST CASE 1

INPUT
6
OUTPUT
6 
5 1 
4 2 
4 1 1 
3 3 
3 2 1 
3 1 1 1 
2 2 2 
2 2 1 1 
2 1 1 1 1 
1 1 1 1 1 1 
The number of ways to write a number as a sum of number smaller than itself is :10
###############CODE###############
import java.util.*;
 
public class TestClass
{
    public static void print(int[] p, int n, int count) 
    {
        for (int i = 0; i < n; i++)
            System.out.print(p[i] + " ");
        System.out.println();
        int j;
        for (j = 0; j < n; j++) 
        {
            if (p[j] == 1)
                continue;
            else
                break;
        }
        if (j == n)
            System.out
                    .println("The number of ways to write a number as a sum of number smaller than itself is :"
                            + (count - 1));
    }
 
    public static void generateUniquePartition(int n) 
    {
        int[] p = new int[n];
        int k = 0, count = 0;
        p[k] = n;
        while (true) 
        {
            count++;
            print(p, k + 1, count);
            int rem_value = 0;
            while (k >= 0 && p[k] == 1) 
            {
                rem_value += p[k];
                k--;
            }
            if (k < 0)
                return;
 
            p[k]--;
            rem_value++;
 
            while (rem_value > p[k]) 
            {
                p[k + 1] = p[k];
                rem_value -= p[k];
                k++;
            }
            p[k + 1] = rem_value;
            k++;
        }
    }
 
    public static void main(String args[]) 
    {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        generateUniquePartition(n);
        sc.close();
    }
}
--------------------------------------------------------------------------------------
decimal into a binary number using stack
QUESTION DESCRIPTION

TO Convert a decimal into a binary number using stack.
TEST CASE 1

INPUT
2
OUTPUT
10
TEST CASE 2

INPUT
15
OUTPUT
1111
###############CODE###############
import java.util.*;
 
/*  DecimalToBinaryUsingStacks  */
public class TestClass
{
    public static void main(String[] args) 
    {    
        Scanner scan = new Scanner(System.in);
        /* Creating Stack object  */
        Stack<Integer> stk = new Stack<Integer>();
        /* Accepting number */        
       
        int num = scan.nextInt();
 
        while (num != 0)
        {
            int d = num % 2;
            stk.push(d);
            num /= 2;
        }        
        /* Print Binary equivalent */
        while (!(stk.isEmpty() ))
        {
            System.out.print(stk.pop());
        }
        System.out.println();
    }
}
-------------------------------------------------------------------------------
Modified Kaprekar Numbers
QUESTION DESCRIPTION

A modified Kaprekar number is a positive whole number n with d digits, such that when we split its square into two pieces - a right hand piece r with d digits and a left hand piece l that contains the remaining d or d-1 digits, the sum of the pieces is equal to the original number (i.e. l +r =n )

Note: r may have leading zeros.

Here is an explanation from Wikipedia about the ORIGINAL Kaprekar Number (spot the difference!): In mathematics, a Kaprekar number for a given base is a non-negative integer, the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45 = 2025 and 20+25 = 45.

The Task
You are given the two positive integers p and q, where p is lower than q. Write a program to determine how many Kaprekar numbers are there in the range between p and q (both inclusive) and display them all.

Input Format
There will be two lines of input: p , lowest value q , highest value

Constraints:

0<p<q<100000

Output Format

Output each Kaprekar number in the given range, space-separated on a single line. If no Kaprekar numbers exist in the given range, print INVALID RANGE.
TEST CASE 1

INPUT
1
100
OUTPUT
1 9 45 55 99
TEST CASE 2

INPUT
45000
100000
OUTPUT
77778 82656 95121 99999
###############CODE###############
import java.io.*;
import java.util.*;

public class TestClass {   
    
    
    public static void main(String[] args) throws Exception {
              
        Scanner sc = new Scanner(System.in); 
        int p = sc.nextInt();
        int q = sc.nextInt();
        boolean isFirst = true;
        for(int i = p; i <= q; i++)
            if(isKaprekar(i)) {
                System.out.printf((isFirst) ? "%d" : " %d", i);
                isFirst = false;
            }
        System.out.println((isFirst) ? "INVALID RANGE" : "");
    }
    
    public static boolean isKaprekar(long a) {
        int d = String.valueOf(a).length();
        String sqr = String.valueOf(a * a);
        if(sqr.length() == 1) return a == 1;
        int idx = sqr.length() - d;
        long x = Long.valueOf(sqr.substring(0, idx));        
        long y = Long.valueOf(sqr.substring(idx));
        return x + y == a;
    }
}
-------------------------------------------------------------------------------
Tricoin
QUESTION DESCRIPTION

Chef belongs to a very rich family which owns many gold mines. Today, he brought N gold coins and decided to form a triangle using these coins. Isn't it strange?

Chef has a unusual way of forming a triangle using gold coins, which is described as follows:
1. He puts 1 coin in the 1st row.
2. then puts 2 coins in the 2nd row.
3. then puts 3 coins in the 3rd row.
and so on as shown in the given figure.

Chef is interested in forming a triangle with maximum possible height using at most N coins. Can you tell him the maximum possible height of the triangle?

Input
The first line of input contains a single integer T denoting the number of test cases.
The first and the only line of each test case contains an integer N denoting the number of gold coins Chef has.
Output
For each test case, output a single line containing an integer corresponding to the maximum possible height of the triangle that Chef can get.

Constraints
1 <=T <=100
1 <=N <=109

Subtasks
Subtask 1 (48 points) : 1<=N<=105
Subtask 2 (52 points) : 1<=N<=109

Explanation
Test 1: Chef can't form a triangle with height > 2 as it requires atleast 6 gold coins.
Test 2: Chef can't form a triangle with height > 2 as it requires atleast 6 gold coins.
Test 3: Chef can't form a triangle with height > 3 as it requires atleast 10 gold coins
TEST CASE 1

INPUT
3
3 5 7
OUTPUT
2
2
3
TEST CASE 2

INPUT
7
7 5 4 3 8 9 5
OUTPUT
3
2
2
2
3
3
2
###############CODE###############
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
public class TestClass
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc= new Scanner(System.in);
		int t = sc.nextInt();
		while(t-->0)
		{
		    int coins = sc.nextInt();
		    int sum=0,h=0;
		    for(int i=1;i<=coins;i++)
		    {
		        sum=sum+i;
		        coins=coins-i;
		        h++;
		    }
		    System.out.println(h);
		    
		}
	}
}
------------------------------------------------------------------------------------
Handshake
QUESTION DESCRIPTION

At the annual meeting of Board of Directors of Acme Inc, every one starts shaking hands with everyone else in the room. Given the fact that any two persons shake hand exactly once, Can you tell the total count of handshakes?

Input Format

The first line contains the number of test cases T, T lines follow.

Each line then contains an integer N, the total number of Board of Directors of Acme.

Output Format

Print the number of handshakes for each test-case in a new line.

Constraints

1 <= T <= 1000
0 < N < 10 power 6
TEST CASE 1

INPUT
2
1
2
OUTPUT
0
1
TEST CASE 2

INPUT
2
100
150
OUTPUT
4950
11175
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass {
	 public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
       int t=sc.nextInt();
       while(t-->0){
       	int n=sc.nextInt();
        System.out.println((n*(n-1))/2); 
       }
	}
}
----------------------------------------------------------------------------------
PATTERNS - L7
QUESTION DESCRIPTION

Write a java program to display the following patterns
TEST CASE 1

INPUT
7
OUTPUT
7 6 5 4 3 2 1 
6 5 4 3 2 1 
5 4 3 2 1 
4 3 2 1 
3 2 1 
2 1 
1
TEST CASE 2

INPUT
8
OUTPUT
8 7 6 5 4 3 2 1 
7 6 5 4 3 2 1 
6 5 4 3 2 1 
5 4 3 2 1 
4 3 2 1 
3 2 1 
2 1 
1
###############CODE###############
import java.io.*;
import java.util.*;
public class TestClass {
	 public static void main(String[] args) { 
		Scanner sc = new Scanner(System.in);
       int n = sc.nextInt();
    	for(int i = n; i > 0; i--)
        {
          for(int j = i; j > 0; j--)
       {
       System.out.print(j +" ");
       }
          System.out.println();
        }
	}
}
---------------------------------------------------------------------------
harmonic Number
QUESTION DESCRIPTION

Print the sum of nth harmonic number: 1/1 + 1/2 + ... + 1/n.

Note:

Use Double Data type and String.format("%.02f", variable name)
TEST CASE 1

INPUT
5
OUTPUT
2.28
TEST CASE 2

INPUT
10
OUTPUT
2.93
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass {
public static void main(String[] args)
{
Scanner in = new Scanner(System.in);
int n,i;
float sum=0;
n=in.nextInt();
for(i=1;i<=n;i++)
sum=sum+(float)1/i;
  
System.out.printf("%.02f", sum);
}
}
----------------------------------------------------------------------------------
Save the Prisoner!
QUESTION DESCRIPTION

A jail has N prisoners, and each prisoner has a unique id number,S , ranging from 1 to N. There are M sweets that must be distributed to the prisoners.

The jailer decides the fairest way to do this is by sitting the prisoners down in a circle (ordered by ascending S ), and then, starting with some random , distribute one candy at a time to each sequentially numbered prisoner until all M candies are distributed.

For example, if the jailer picks prisoner S=2, then his distribution order would be (2,3,4,5,...,n-1,n,1,2,3,4,..) until all M sweets are distributed.

But wait - there's a catch - the very last sweet is poisoned! Can you find and print the ID number of the last prisoner to receive a sweet so he can be warned?

Input Format

The first line contains an integer,T , denoting the number of test cases.

The T subsequent lines each contain 3 space-separated integers:

N (the number of prisoners), M (the number of sweets), and S(the prisoner ID), respectively.

Constraints

1<=T<=100
1<=N<=10 power 9
1<=M<=109 power 9
1<=S<=109 power 9

Output Format

For each test case, print the ID number of the prisoner who receives the poisoned sweet on a new line.
TEST CASE 1

INPUT
1
5 2 1
OUTPUT
2
TEST CASE 2

INPUT
1
7 3 9
OUTPUT
4
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass {
	 public static void main(String[] args) { 
		
       Scanner sc = new Scanner(System.in);
       int T = sc.nextInt();
       int N,M,S;
       while(T > 0){
         N = sc.nextInt();
         M = sc.nextInt();
         S = sc.nextInt();
         int ans = (M - 1 + S - 1) % N + 1;
         System.out.println(ans);
         T--;
       }
	}
} 
-----------------------------------------------------------------------------
