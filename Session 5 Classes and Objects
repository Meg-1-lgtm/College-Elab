PERSON
QUESTION DESCRIPTION

Create a class called Person with object name "objname" the following 3 private data members / member variables name of type string, yearOfBirth and yearOfDeath of type int.

Include 2 public member functions or methods: inputData() that accepts no arguments and its return type is void.

Get the values of the 3 data members from the user in this function. Assume that only the last 2 digits of the birth year and death year are given as input and if the person is still living, the death year is entered as -1.

display() that accepts no arguments and its return type is void.

Inside the display function, print the message as given in the sample input and output. In the main method / function, create an object of class person and test the 2 methods/ functions.
TEST CASE 1

INPUT
Ram
1920
1990
OUTPUT
Ram lived for 70 years
TEST CASE 2

INPUT
Sam
1980
-1
OUTPUT
Sam is still alive
###############CODE###############
import java.io.*;
import java.util.Scanner;
class Person
{
  
 private String name;
 private int yearOfBirth,yearOfDeath;
  public void inputData()
  {
    Scanner sc=new Scanner(System.in);
    name=sc.nextLine();
    yearOfBirth=sc.nextInt();
    yearOfDeath=sc.nextInt();
  }
  public void display()
  {
    if(yearOfDeath==-1)
    System.out.println(name+" is still alive");
    else
    {
    System.out.println(name+" lived for "+(yearOfDeath-yearOfBirth)+" years");
    }
  }
}
public class TestClass {
	 public static void main(String[] args) { 
       Person objname=new Person();
       objname.inputData();
       objname.display();
		
	}
}
-------------------------------------------------------------------------------------------
Student information
QUESTION DESCRIPTION

Mandatory:
Create a class StudentData with the private members int stuID, String stuName, private int stuAge.

Store the student data using default and parameterized constructors.

Also the class should consists of the following getter and setter methods: getStuID(), setStuID(),getStuName(), setStuName(),getStuAge(), setStuAge().

Display the student information.(Note:Enter student Name,student ID and student Age for parameterized constructor)
TEST CASE 1

INPUT
Akash
111
19
OUTPUT
Student Name is:New Student
Student Age is:18
Student ID is:100
Student Name is:Akash
Student Age is:19
Student ID is:111
TEST CASE 2

INPUT
Chandra
556
22
OUTPUT
Student Name is:New Student
Student Age is:18
Student ID is:100
Student Name is:Chandra
Student Age is:22
Student ID is:556
###############CODE###############
import java.io.*;

import java.util.Scanner;
public class TestClass {
    public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      String name=sc.next();
      int id=sc.nextInt();
      int age=sc.nextInt();
      
        StudentData obj= new StudentData(id,name,age);
        obj.display();
    }
}
class StudentData{
   private int stuID;
   private String stuName;
   private int stuAge;
   StudentData(){
       stuID=0;
       stuAge=0;
       stuName="";
   }
   StudentData(int s,String n,int a){
       stuID=s;
       stuName=n;
       stuAge=a;
   }


    public int getStuID() {
        return stuID;
    }

    public void setStuID(int stuID) {
        this.stuID = stuID;
    }

    public String getStuName() {
        return stuName;
    }

    public void setStuName(String stuName) {
        this.stuName = stuName;
    }

    public int getStuAge() {
        return stuAge;
    }

    public void setStuAge(int stuAge) {
        this.stuAge = stuAge;
    }
    public void display(){
        System.out.println("Student Name is:New Student");
        System.out.println("Student Age is:18");
        System.out.println("Student ID is:100");
        System.out.println("Student Name is:"+stuName);
        System.out.println("Student Age is:"+stuAge);
        System.out.println("Student ID is:"+stuID);
    }
}
------------------------------------------------------------------------------------
Prime number in an array
QUESTION DESCRIPTION

Java program to find prime numbers in an array

Mandatory:

1. Create a new class "Prime" and the object name for the class should be "obj"

2. Create two methods as follows:

a. Method name = getPrime()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

a. Method name = calculatePrime()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods getPrime() and displayPrime() using the object name "obj" from the main method

4. The input details are promoted in getPrime() and the transpose is calculated and printed in displayPrime
TEST CASE 1

INPUT
4
2 8 7 5
OUTPUT
2
7
5
TEST CASE 2

INPUT
18
2 3 5 7 11 13 17 19 23 29 31 37 41 24 56 78 14 20
OUTPUT
2
3
5
7
11
13
17
19
23
29
31
37
41
###############CODE###############
import java.io.*;
import java.util.Scanner;
class Prime
{

  int[] arr;
  int[] result;
  public int len;
  public void getPrime()
  {
    Scanner sc =new Scanner (System.in);
    boolean isPrime = true;
    int k=0;
    
    len=sc.nextInt();

    arr=new int[len];
    result=new int[len];
    for(int i=0;i<len;i++)
    { 
      isPrime = true;
      arr[i]=sc.nextInt();
     
      for (int j=2; j<arr[i]; j++){
        if(arr[i]%j==0){
            isPrime = false;
            break;
       }}
        if(isPrime)
        {
          result[k++]= arr[i];
        }
               
    }
    
   
  }
  public void calculatePrime()
  {
     for(int i=0;i<result.length;i++)
       if(result[i]!=0)
      System.out.println(result[i]);
  }
}
public class TestClass
{
  public static void main(String args[])
  {
    Prime obj=new Prime();
    obj.getPrime();
    obj.calculatePrime();
  }
}
-------------------------------------------------------------------------------------
Automorphic number
QUESTION DESCRIPTION

Write a Java program check whether a number is an Automorphic number or not using Classes and Objects concept

In mathematics, an automorphic number is a number whose square "ends" in the same digits as the number itself.

For example 5 = 25, 6 = 36, 25 = 625, 76 = 5776

so 5, 6, 76 and 890625 are all automorphic numbers.

Mandatory:

1. Create a class "Automorphic" with one method as follows:

a. Method name = calculate
b. Access Specifier = public
c. Return type = void
d. Argument = No argument

2. To check the last number use "endsWith" method that takes one argument as String.
Hint: Convert integer value to String using Integer.toString method

3.Create an instance in the main method for "Automorphic" class and the object name should be "objname".

4. Call the method calculate from the main method using instance of "Automorphic" class.
TEST CASE 1

INPUT
76
OUTPUT
5776
Automorphic Number
TEST CASE 2

INPUT
96
OUTPUT

9216
Not an Automorphic Number
###############CODE###############
import java.io.*;
import java.util.Scanner;
class Automorphic
{
  Scanner in = new Scanner(System.in);
  public void calculate()
  {
    
  long n = in.nextInt();
  long sq = n*n;
  String num = Integer.toString((int)n);
  String square = Integer.toString((int)sq);
  boolean a = square.endsWith(num);
    System.out.print(sq);
  if(a)
    System.out.print("\nAutomorphic Number");
  else
    System.out.print("\nNot an Automorphic Number");
  }
}
public class TestClass {
	 public static void main(String[] args) { 
		Scanner in = new Scanner(System.in);
       Automorphic objname = new Automorphic();
       objname.calculate();
	}
}
------------------------------------------------------------------------------------
Automorphic number using static
QUESTION DESCRIPTION

Write a Java program check whether a number is an Automorphic number or not using Classes and Objects concept

In mathematics, an automorphic number is a number whose square "ends" in the same digits as the number itself.

For example 5 = 25, 6 = 36, 25 = 625, 76 = 5776

so 5, 6, 76 and 890625 are all automorphic numbers.

Mandatory:

1. Create a class "Automorphic" with one method as follows:

a. Method name = calculate
b. Access Specifier = static
c. Return type = void
d. Argument = No argument

2. To check the last number use "endsWith" method that takes one argument as String.
Hint: Convert integer value to String using Integer.toString method

3. Call the method calculate from the main method using classname.methodname
TEST CASE 1

INPUT
76
OUTPUT
5776
Automorphic Number
TEST CASE 2

INPUT
96
OUTPUT
9216
Not an Automorphic Number
###############CODE###############
import java.io.*;
import java.util.Scanner;
class Automorphic{
  	static void calculate(){
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      String s=Integer.toString((n*n));
      String str=Integer.toString(n);
      if(s.endsWith(str)){
      	System.out.println(s);
        System.out.println("Automorphic Number");
      }
      else{
      	System.out.println(s);
        System.out.println("Not an Automorphic Number");
      }
    }
}
public class TestClass {
	 public static void main(String[] args) { 
		Automorphic.calculate();
	}
}
------------------------------------------------------------------------------------
Even and odd elements in array
QUESTION DESCRIPTION

Java program to print even and odd element in array

Mandatory:

1. Create a new class EvenOdd and the object name for the class should be "obj"

2. Create two methods as follows:

a. Method name = getInput()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

a. Method name = findOddEven()
b. Type = void
c. Access Specifier = public
d. Argument Type = no arguments

3. Access the methods getInput() and findOddEven() using the object name "obj" from the main method

4. The input details are promoted in getInput() and the ood and even numbers were is printed in findOddEven()
TEST CASE 1

INPUT
5
1
2
3
4
5
OUTPUT
Odd :1 3 5 
Even :2 4 
TEST CASE 2

INPUT
4
6
9
7
11
OUTPUT
Odd :9 7 11 
Even :6 
###############CODE###############
import java.io.*;
import java.util.Scanner;
class EvenOdd {
 
  Scanner sc = new Scanner(System.in);
  int l;
  int[] arr = new int[30]; 
  int[] even;
  int[] odd;
  
public void getInput(){
 
  l = sc.nextInt();
  for (int i = 0;i < l;i++)
    arr[i] = sc.nextInt();
  
}
public void findOddEven(){
   int j = 0, k = 0;
   int o = 0,e = 0;
   for (int i = 0;i < l;i++){
    	if (arr[i] % 2 == 0)
          	e++;
     	else
          	o++;
   }
  	even = new int[e];
  	odd = new int[o];
   for (int i = 0; i < l;i++) {
     
    	if (arr[i] % 2 == 0) {
          even[j] = arr[i];
     	  j++;
        }
     	else if (arr[i] % 2 != 0){
         	odd[k] = arr[i];
          	k++;
        }
     
   }
   System.out.print("Odd :");
   for (int i = 0;i < odd.length;i++)
     	System.out.print(odd[i]+" ");
  	System.out.println();
  	System.out.print("Even :");
  	for (int i = 0;i < even.length;i++)
      	System.out.print(even[i]+" ");
  
}
}
public class TestClass {
  
	 public static void main(String[] args) { 
		
       EvenOdd obj = new EvenOdd();
       
       obj.getInput();
       obj.findOddEven();
       
	}
} 
-------------------------------------------------------------------------------------
Ciel and A-B Problem
QUESTION DESCRIPTION

In Ciel's restaurant, a waiter is training. Since the waiter isn't good at arithmetic, sometimes he gives guests wrong change. Ciel gives him a simple problem. What is A-B (A minus B) ?

Surprisingly, his answer is wrong. To be more precise, his answer has exactly one wrong digit. Can you imagine this? Can you make the same mistake in this problem?

Input

An input contains 2 integers A and B.

Output

Print a wrong answer of A-B. Your answer must be a positive integer containing the same number of digits as the correct answer, and exactly one digit must differ from the correct answer. Leading zeros are not allowed. If there are multiple answers satisfying the above conditions, anyone will do.

Constraints

1 B < A 10000
TEST CASE 1

INPUT
5858 1234
OUTPUT
1624
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass 
{
  public static void main(String[] args) 
     { 
    Scanner sc = new Scanner (System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.print(a-b-3000);
	}
}
-------------------------------------------------------------------------------------------
GCD and LCM
QUESTION DESCRIPTION

Write a Program to to Find the GCD and LCM of two Numbers
TEST CASE 1

INPUT
15
25
OUTPUT
5
75
TEST CASE 2

INPUT
5
8
OUTPUT
1
40
###############CODE###############
import java.io.*;
import java.util.Scanner;
public class TestClass {
	 public static void main(String[] args) { 
 Scanner input=new Scanner(System.in);		
	int a= input.nextInt();
     int b=input.nextInt();
int x=a;
       int y=b;
       while(y!=0)
       {
        int t=y;
         y=x%y;
         x=t;
       }
       int hcf=x;
       int lcm=(a*b)/hcf;
       System.out.println(""+hcf);
       System.out.println(""+lcm);
     }
}
---------------------------------------------------------------------------------------
Lapindromes
QUESTION DESCRIPTION

Lapindrome is defined as a string which when split in the middle, gives two halves having the same characters and same frequency of each character. If there are odd number of characters in the string, we ignore the middle character and check for lapindrome. For example gaga is a lapindrome, since the two halves ga and ga have the same characters with same frequency. Also, abccab, rotor and xyzxy are a few examples of lapindromes. Note that abbaab is NOT a lapindrome. The two halves contain the same characters but their frequencies do not match.
Your task is simple. Given a string, you need to tell if it is a lapindrome.

Input:

First line of input contains a single integer T, the number of test cases.
Each test is a single line containing a string S composed of only lowercase English alphabet.
Output:

For each test case, output on a separate line: "YES" if the string is a lapindrome and "NO" if it is not.
Constraints:

1 T 100
2 |S| 1000, where |S| denotes the length of S
TEST CASE 1

INPUT
6
gaga
abcde
rotor
xyzxy
abbaab
ababc
OUTPUT
YES
NO
YES
YES
NO
NO
TEST CASE 2

INPUT
8 
kljdh
bvcd
ndhfbn lhbnbd
jggnnfdkl
gaga
sdfs
ssfcx
OUTPUT
NO
NO
NO
NO
NO
YES
NO
NO
###############CODE###############
import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
public class TestClass
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for(int i =0 ;i<t;i++){
		    String s = sc.next();
		    int n = s.length();
		    String a ="";
		    String b ="";
		    if(s.length()%2==0){
		        a = s.substring(0,n/2);
		        b = s.substring(n/2 ,n);
		    }else{
		        a = s.substring(0,n/2);
		        b = s.substring((n/2)+1 ,n);
		    }
		    char c [] = a.toCharArray();
		    char [] z = b.toCharArray();
		    Arrays.sort(c);
		    Arrays.sort(z);
		    String f = "";
		    String x ="";
		    f= String.valueOf(c);
		    x = String.valueOf(z);
		    if(f.equals(x)){
		        System.out.println("YES");
		    }else{
		        System.out.println("NO");
		    }
		}
	}
}
--------------------------------------------------------------------------------------
Laddu
QUESTION DESCRIPTION

You might have heard about our new goodie distribution program aka the "Laddu Accrual System". This problem is designed to give you a glimpse of its rules. You can read the page once before attempting the problem if you wish, nonetheless we will be providing all the information needed here itself.

Laddu Accrual System is our new goodie distribution program. In this program, we will be distributing Laddus in place of goodies for your winnings and various other activities (described below), that you perform on our system. Once you collect enough number of Laddus, you can then redeem them to get yourself anything from a wide range of CodeChef goodies.

Let us know about various activities and amount of laddus you get corresponding to them.

Contest Win (CodeChefs Long, Cook-Off, LTIME, or any contest hosted with us) : 300 + Bonus (Bonus = 20 - contest rank). Note that if your rank is > 20, then you won't get any bonus.
Top Contributor on Discuss : 300
Bug Finder : 50 - 1000 (depending on the bug severity). It may also fetch you a CodeChef internship!
Contest Hosting : 50
You can do a checkout for redeeming laddus once a month. The minimum laddus redeemable at Check Out are 200 for Indians and 400 for the rest of the world.

You are given history of various activities of a user. The user has not redeemed any of the its laddus accrued.. Now the user just wants to redeem as less amount of laddus he/she can, so that the laddus can last for as long as possible. Find out for how many maximum number of months he can redeem the laddus.

Input

The first line of input contains a single integer T denoting number of test cases
For each test case:
First line contains an integer followed by a string denoting activities, origin respectively, where activities denotes number of activities of the user, origin denotes whether the user is Indian or the rest of the world. origin can be "INDIAN" or "NON_INDIAN".
For each of the next activities lines, each line contains an activity.
An activity can be of four types as defined above.
Contest Win : Input will be of form of CONTEST_WON rank, where rank denotes the rank of the user.
Top Contributor : Input will be of form of TOP_CONTRIBUTOR.
Bug Finder : Input will be of form of BUG_FOUND severity, where severity denotes the severity of the bug.
Contest Hosting : Input will be of form of CONTEST_HOSTED.
Output

For each test case, find out the maximum number of months for which the user can redeem the laddus accrued.
Constraints

1 T, activities 100
1 rank 5000
50 severity 1000
Subtasks

There is only a single subtask with 100 points.
TEST CASE 1

INPUT
2
4 INDIAN
CONTEST_WON 1
TOP_CONTRIBUTOR
BUG_FOUND 100
CONTEST_HOSTED
4 NON_INDIAN
CONTEST_WON 1
TOP_CONTRIBUTOR
BUG_FOUND 100
CONTEST_HOSTED
OUTPUT
3
1
###############CODE###############
import java.util.*;
import java.io.*;

public class TestClass{
    static class FastReader{
        BufferedReader br;
        StringTokenizer st;
        public FastReader(){
            br=new BufferedReader(new InputStreamReader(System.in));
        }
        String next(){
            while(st==null || !st.hasMoreTokens()){
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
        int nextInt(){
            return Integer.parseInt(next());
        }
        long nextLong(){
            return Long.parseLong(next());
        }
        double nextDouble(){
            return Double.parseDouble(next());
        }
        String nextLine(){
            String str="";
            try {
                str=br.readLine().trim();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return str;
        }
    }
    static class FastWriter {
		private final BufferedWriter bw;

		public FastWriter() {
			this.bw = new BufferedWriter(new OutputStreamWriter(System.out));
		}

		public void print(Object object) throws IOException {
			bw.append("" + object);
		}

		public void println(Object object) throws IOException {
			print(object);
			bw.append("\n");
		}

		public void close() throws IOException {
			bw.close();
		}
	}
    public static void main(String[] args) {
        try {
            FastReader in=new FastReader();
            FastWriter out = new FastWriter();
            int testCases=in.nextInt();
            while(testCases-- > 0){
                String inp[]=in.nextLine().split(" ");
                int n=Integer.parseInt(inp[0]);
                int laddus=0;
                for(int i=1;i<=n;i++){
                    String[] s=in.nextLine().split(" ");
                    if(s[0].equals("CONTEST_WON")){
                        int rank=Integer.parseInt(s[1]);
                        laddus+=300;
                        if(rank<=20)
                            laddus+=(20-rank);
                    }
                    else if(s[0].equals("TOP_CONTRIBUTOR"))
                        laddus+=300;
                    else if(s[0].equals("BUG_FOUND")){
                        int bug_severity=Integer.parseInt(s[1]);
                        laddus+=bug_severity;
                    }
                    else if(s[0].equals("CONTEST_HOSTED"))
                        laddus+=50;
                }
                if(inp[1].equals("INDIAN"))
                    out.println(laddus/200);
                else
                    out.println(laddus/400);
            }
            out.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
-------------------------------------------------------------------------------------
Pollard Rho
QUESTION DESCRIPTION

Write a Program to Implement Pollard Rho Algorithm
TEST CASE 1

INPUT
2406
OUTPUT
2
3
401
###############CODE###############
import java.util.Scanner;
 
/** Class PollardRho **/
public class TestClass  
{
    private static final long C = 1; 
    /** function X * X + C, change value of C as required **/
    private long f(long X)    
    {
        return X * X + C;
    }
    /** get divisor **/
    private long rho(long N) 
    {
        long x1 = 2, x2 = 2, divisor;        
        if (N % 2 == 0) 
            return 2;
        do 
        {
            x1 = f(x1) % N;
            x2 = f(f(x2)) % N;
            divisor = gcd(Math.abs(x1 - x2), N);
        } while (divisor == 1);
        /** return divisor **/
        return divisor;
    }
    /** GCD of two numbers **/
    public  long gcd(long p, long q)
    {
        if (p % q == 0)
            return q;
        return gcd(q, p % q);
    }
    /** Check if num is prime **/
    public boolean isPrime(long N)
    {
        for (int i = 2; i <= Math.sqrt(N); i++)
            if (N % i == 0)
                return false;
        return true;
    }
    /** get all factors **/
    public void factor(long N) 
    {
        if (N == 1)
            return;
        if (isPrime(N)) 
        {
            System.out.println(N); 
            return; 
        }
           long divisor = rho(N);
        factor(divisor);
        factor(N / divisor);
    }
    /** Main function **/
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);
      
        long N = scan.nextLong();
        
        TestClass pr = new TestClass();
        pr.factor (N);        
    }
}
-------------------------------------------------------------------------------------
Extended Euclid Algorithm
QUESTION DESCRIPTION

Write a Program to Implement Extended Euclid Algorithm
TEST CASE 1

INPUT
120 23
OUTPUT
Roots  x : -9 y :47
###############CODE###############
import java.util.*;
 
/** Class ExtendedEuclid **/
public class TestClass
{
    /** Function to solve **/
    public void solve(long a, long b)
    {
        long x = 0, y = 1, lastx = 1, lasty = 0, temp;
        while (b != 0)
        {
            long q = a / b;
            long r = a % b;
 
            a = b;
            b = r;
 
            temp = x;
            x = lastx - q * x;
            lastx = temp;
 
            temp = y;
            y = lasty - q * y;
            lasty = temp;            
        }
        System.out.println("Roots  x : "+ lastx +" y :"+ lasty);
    }
    /** Main function **/
    public static void main (String[] args) 
    {
        Scanner scan = new Scanner(System.in);
      TestClass ee = new TestClass();
        
        
 
        /** Accept two integers **/
        
        long a = scan.nextLong();
        long b = scan.nextLong();
        /** Call function solve of class ExtendedEuclid **/
      ee.solve(a,b);
            
    }
}
---------------------------------------------------------------------------------------
