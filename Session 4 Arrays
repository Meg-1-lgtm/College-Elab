Substring of string
QUESTION DESCRIPTION

Java program to find sub string of string
TEST CASE 1

INPUT
ARRahman
OUTPUT
A
AR
ARR
ARRa
ARRah
ARRahm
ARRahma
ARRahman
R
RR
RRa
RRah
RRahm
RRahma
RRahman
R
Ra
Rah
Rahm
Rahma
Rahman
a
ah
ahm
ahma
ahman
h
hm
hma
hman
m
ma
man
a
an
n
TEST CASE 2

INPUT
Illayaraja
OUTPUT
I
Il
Ill
Illa
Illay
Illaya
Illayar
Illayara
Illayaraj
Illayaraja
l
ll
lla
llay
llaya
llayar
llayara
llayaraj
llayaraja
l
la
lay
laya
layar
layara
layaraj
layaraja
a
ay
aya
ayar
ayara
ayaraj
ayaraja
y
ya
yar
yara
yaraj
yaraja
a
ar
ara
araj
araja
r
ra
raj
raja
a
aj
aja
j
ja
a
###############CODE###############
import java.io.*;
import java.util.*;
public class TestClass 
{
 public static void main(String args[])
 {
   String str ;
   Scanner sc = new Scanner(System.in);
   str = sc.nextLine();

   for (int i = 0; i < str.length(); i++) {
   for (int j = i+1; j <= str.length(); j++) {
         System.out.println(str.substring(i,j));
 
   }
  }
 }
}
-----------------------------------------------------------------------------
Check strings are equal
QUESTION DESCRIPTION

Write a Java program How to check if two arrays are equal or not
Input: Array length followed by the elements of two array
Output: Equal or not
TEST CASE 1

INPUT
6 6
1 2 3 4 5 6   
1 2 3 4 5 6
OUTPUT
Arrays are equal
TEST CASE 2

INPUT
5 5
1 5 8 9 10
1 4 2 1 8
OUTPUT
Arrays are not equal
###############CODE###############
import java.util.*;
public class TestClass
{
static void sort(int arr[], int n)
{
int i,j;
for (i = 0; i < n-1; i++)
{
for (j = 0; j < n-i-1; j++)
{
if (arr[j] > arr[j+1])
{
int temp = arr[j];
arr[j] = arr[j+1];
arr[j+1] = temp;
}
}
}
}

static int arrays_equal(int arr1[], int arr2[], int n, int m)
{
sort(arr1,n);
sort(arr2,m);
int i, count = 0;
for(i = 0; i < n; i++)
{
if(arr1[i] == arr2[i])
{
count++;
}
}
return count;
}

public static void main(String[] args)
{
int n,m, count = 0;
Scanner sc = new Scanner(System.in);
n = sc.nextInt();
m = sc.nextInt();
int[]arr1 = new int[n];
int[]arr2 = new int[n];
for(int i = 0; i < n; i++)
{
arr1[i] = sc.nextInt();
}
for(int i = 0; i < m; i++)
{
arr2[i] = sc.nextInt();
}

if(arrays_equal(arr1, arr2, n, m) != n)
{
System.out.print("Arrays are not equal");
}
else
System.out.print("Arrays are equal");

}
}
------------------------------------------------------------------------
Finding Binary values
QUESTION DESCRIPTION

Write a java program to check whether given number is binary or not.A binary number is a number which contains only 0 or 1.

For example : 101101, 110010110, 10010011 are binary numbers
TEST CASE 1

INPUT
12345
OUTPUT
12345 is not a Binary Number
TEST CASE 2

INPUT
111111
OUTPUT
111111 is a Binary Number
###############CODE###############
import java.util.Scanner;
public class TestClass{
  public static void main(String args[])
        {
    int r=0,c=0,num,a;
    Scanner sc=new Scanner(System.in);
    num=sc.nextInt();
    a = num;
    while(num>0)
                   {
                      if((num%10==0) || (num%10==1))
                         c++;
                         r++;
                         num=num/10;
                   }
                    if(c==r)
               System.out.println(a+" is a Binary Number");
               else
               System.out.println(a+" is not a Binary Number");
           }
}
-----------------------------------------------------------------------------
Second Largest and smallest number
QUESTION DESCRIPTION

Java Program to find second largest and smallest elements in an array
TEST CASE 1

INPUT
4
23 100 1 45
OUTPUT
Second Largest:45
Smallest:1
TEST CASE 2

INPUT
5
11 18 56 34 21
OUTPUT
Second Largest:34
Smallest:11
###############CODE###############
import java.util.Scanner;
public class TestClass
{
    public static void main(String[] args) 
    {
        int n, temp;
        Scanner s = new Scanner(System.in);
        n = s.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++) 
        {
            a[i] = s.nextInt();
        }
        for (int i = 0; i < n; i++) 
        {
            for (int j = i + 1; j < n; j++) 
            {
                if (a[i] > a[j]) 
                {
                    temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        System.out.println("Second Largest:"+a[n-2]);
        System.out.println("Smallest:"+a[0]);
    }
}
---------------------------------------------------------------------------------
Check Multiplicability
QUESTION DESCRIPTION

Write Program to Check Multiplicability of Two Matrices
TEST CASE 1

INPUT
1 2
2 3
OUTPUT
Matrices are multipilcable
TEST CASE 2

INPUT
1 2
1 2
OUTPUT
Matrices are not multipilcable
###############CODE###############
import java.util.Scanner;
 
public class TestClass 
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int rowA = sc.nextInt();
        int colA = sc.nextInt();
        int rowB = sc.nextInt();
        int colB = sc.nextInt();
 
        if(colA == rowB)
        {
            System.out.println("Matrices are multipilcable");
        }
        else
        {
            System.out.println("Matrices are not multipilcable");
        }
        sc.close();
 
    }
}
----------------------------------------------------------------------------------
Help Mommy out
QUESTION DESCRIPTION

Mommy is a very active lady. She likes to keep all stuff sorted. She has developed an interesting technique of sorting stuff over the years. She goes through the items repeatedly from first to last and whenever she finds two consecutive items unsorted, she puts them in the proper order. She continues the process until all the items are sorted. One day Mommy has to attend a wedding ceremony. Suddenly she remembers that she has not sorted the plates after washing. She has only M minutes left. If she can complete the task within the remaining time, she will sort her plates and then attend the wedding. However if she cannot, she decides to skip the task. She knows that she take S seconds per swap. However she does not know the total number of swaps required and hence she is in trouble. She wants you to help her out.


Input:
The first line of input takes the number of test cases T .Then T test cases follow .
Each test case contains 2 lines . The first line of each test case contains 3 space separated integers M,S and N, where N is the number of plates .The next line of the test case contains N space separated values which denotes the size of the plates .


Output:

Print 1 if mommy can complete the task, 0 otherwise.


Constraints:

1<=T<=100

1<=M<=100

1<=S<=100

1<=N<=100

1<=Size of Plate<=200
TEST CASE 1

INPUT
3
20 15 5
35 10 85 90 30
10 30 10
48 14 37 29 30 47 11 23 25 8
5 40 8
25 28 12 20 6 5 37 26
OUTPUT
1
0
0
TEST CASE 2

INPUT
3
20 15 5
35 10 85 90 30
20 15 5
35 10 85 90 30
12 2 2
12 43 34 17 97
OUTPUT
1
1
1
###############CODE###############
import java.io.*;
import java.util.*;
public class TestClass {
	 public static void main(String[] args) { 
       Scanner inp=new Scanner(System.in);
       int tc=inp.nextInt();
       for(int z=0;z<tc;z++){
       int min=inp.nextInt();
       int sec=inp.nextInt();
       int n=inp.nextInt();
       int[] a=new int[n];
       for(int i=0;i<n;i++){
         a[i]=inp.nextInt();
       }
       int mintosec=min*60;
       //System.out.println("Minutes in seconds:"+mintosec);
       int swapct=0;
       int t=0;
       for (int i=0;i<n;i++){
         for(int j=i+1;j<n;j++){
           if(a[i]>a[j]){
             swapct++;
             t=a[i];
             a[i]=a[j];
             a[j]=t;
             
           }
       }
       }
       //System.out.println("swap count:"+swapct);
       int reqsec=sec*swapct;
       if(reqsec<mintosec)
         System.out.println("1");
       else System.out.println("0");
       }
	}
}
--------------------------------------------------------------------------------------
Transpose of a matrix
QUESTION DESCRIPTION

Java Program to transpose of a matrix
Given an M x N matrix, transpose the matrix without auxiliary memory
TEST CASE 1

INPUT
2 3
11 18 56 19 34 16
OUTPUT
11 19 
18 34 
56 16 
TEST CASE 2

INPUT
3 3
14 10 34 23 17 78 56 45 99
OUTPUT
14 23 56 
10 17 45 
34 78 99 
###############CODE###############
import java.util.Scanner;
public class TestClass
{
    public static void main(String args[])  
    {
	int i, j;
	Scanner s = new Scanner(System.in);
	int row = s.nextInt();
	int column = s.nextInt();
	int array[][] = new int[row][column];
 	for(i = 0; i < row; i++)
  	{
   	    for(j = 0; j < column; j++) 
     	    {
        	array[i][j] = s.nextInt();
        	System.out.print("");
            }
  	}
  	for(i = 0; i < column; i++)
    	{
      	    for(j = 0; j < row; j++)
            {
                System.out.print(array[j][i]+" ");
            }
            System.out.println("");
        }
    }
}
------------------------------------------------------------------------------------
Palindrome Problem
QUESTION DESCRIPTION

Write a java program to check palindrome string using recursioN
TEST CASE 1

INPUT
madam
OUTPUT
madam is a palindrome
TEST CASE 2

INPUT
MADam
OUTPUT
MADam is not a palindrome
###############CODE###############
import java.util.Scanner;
public class TestClass
{
   // to check if string is palindrome using recursion
   public static boolean checkPalindrome(String str)
   {
      if(str.length() == 0 || str.length() == 1)
         return true; 
      if(str.charAt(0) == str.charAt(str.length() - 1))
         return checkPalindrome(str.substring(1, str.length() - 1));
      return false;
   }
   public static void main(String[]args)
   {
      Scanner sc = new Scanner(System.in);
      String strInput = sc.nextLine();
      if(checkPalindrome(strInput))
      {
         System.out.println(strInput + " is a palindrome");
      }
      else
      {
         System.out.println(strInput + " is not a palindrome");
      }
      sc.close();
   }
}
------------------------------------------------------------------------------------
Flatland Space Stations
QUESTION DESCRIPTION

Flatland is a country with n cities, m of which have space stations. Each city,ci , is numbered with a distinct index from 0 to n-1 , and each city ci is connected to city ci+1 by a bidirectional road that is 1km in length.
For example, if n=5 and cities c0 and c4 have space stations, then Flatland looks like this:

For each city, determine its distance to the nearest space station and print the maximum of these distances.
Input Format
The first line consists of two space-separated integers, n and m .
The second line contains m space-separated integers describing the respective indices of each city having a space-station. These values are unordered and unique.
Constraints
1<=n<=105
1<=m<=n
It is guaranteed that there will be at least 1 city with a space station, and no city has more than one.
Output Format
Print an integer denoting the maximum distance that an astronaut in a Flatland city would need to travel to reach the nearest space station.
TEST CASE 1

INPUT
5 2
0 4
OUTPUT
2
###############CODE###############
import java.io.*;
import java.util.*;

public class TestClass {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner input = new Scanner(System.in);
        int n = input.nextInt(); //Number of cities
        int m = input.nextInt(); //Number of spacestations
        int[] map = new int[n];  //Map of all the cities
        int[] distanceMap = new int[n]; //Map containing distances to the nearest spacestation
        
        int leftNearest = n+1; //The spacestation nearest to a city from the left side
        int rightNearest = -1; //The spacestation nearest to a city from the right side
        int maxDistance  = 0;  //The max distance you have to travel from any city to a spacestation
        
        //Mark cities who have a spacestation
        for(int i = 0; i < m; i++)
        {
            int spacestation = input.nextInt();
            map[spacestation] = 1;
            
            rightNearest = (spacestation > rightNearest) ? spacestation : rightNearest;
            leftNearest = (spacestation < leftNearest) ? spacestation : leftNearest;
        }
        
        //Scan left right calculating value based on left nearest
        for(int i = 0; i < n; i++)
        {
            if(map[i] == 1)//If there is a spacestation in a given city then distance is 0 and it is the new leftNearest
            {
                distanceMap[i] = 0;
                leftNearest = i;
            }
            else
            {
                if(i > leftNearest)
                {
                    //Update the min distance from the leftNearest on the distance map
                    distanceMap[i] = i - leftNearest;
                }
                else //Occurs when there is not leftNearest spaceStation yet
                {
                    distanceMap[i] = n+1;
                }
            }
        }
        
        //Scan right left calculating value base on right nearest
        for(int i = n-1; i>= 0; i--)
        {
            if(map[i] == 1)
            {
                rightNearest = i;
            }
            else
            {
                if(rightNearest > i)
                {
                    //Update the min distance for each point on the distance map
                    distanceMap[i] = (distanceMap[i] > rightNearest - i) ? rightNearest - i : distanceMap[i];
                }
            }
            
            //Keep track of the maxDistance
            maxDistance = (distanceMap[i] > maxDistance) ? distanceMap[i] : maxDistance;
        }

        System.out.println(maxDistance);
        
    }
}
--------------------------------------------------------------------------------------------
Simple Array Sum
QUESTION DESCRIPTION

Given an array of N integers, can you find the sum of its elements?
Input Format
The first line contains an integer, N, denoting the size of the array.
The second line contains N space-separated integers representing the array's elements.
Output Format
Print the sum of the array's elements as a single integer.
TEST CASE 1

INPUT
6
1 2 3 4 10 11
OUTPUT
31
###############CODE###############
import java.util.*;
public class TestClass {
	 public static void main(String[] args) { 
     Scanner sc = new Scanner(System.in);
     int length = sc.nextInt();
     int sum = 0;
     for(int i = 0; i < length; i++) {
     sum += sc.nextInt();
     }
     System.out.println(sum);
    }
}
-------------------------------------------------------------------------------------------
Bon Apptit
QUESTION DESCRIPTION

Anna and Brian order items at a restaurant, but Anna declines to eat any of the Kth item (where 0<=K<n ) due to an allergy. When the check comes, they decide to split the cost of all the items they shared; however, Brian may have forgotten that they didn't split the Kth item and accidentally charged Anna for it.
You are given n,K , the cost of each of the items, and the total amount of money that Brian charged Anna for her portion of the bill. If the bill is fairly split, print Bon Appetit; otherwise, print the amount of money that Brian must refund to Anna.
Input Format
The first line contains two space-separated integers denoting the respective values of n(the number of items ordered) and K (the 0-based index of the item that Anna did not eat).
The second line contains n space-separated integers where each integer i denotes the cost,c[i] , of item i (where 0<=i<=n).
The third line contains an integer,bcharged , denoting the amount of money that Brian charged Anna for her share of the bill.
Constraints
2<=n<=105
0<=k<=n
0<=c[i]<=104
0<=b<= summation of c[i]
Output Format
If Brian did not overcharge Anna, print Bon Appetit on a new line; otherwise, print the difference (i.e., bcharged - bactual ) that Brian must refund to Anna (it is guaranteed that this will always be an integer).
TEST CASE 1

INPUT
4 1
3 10 2 9
12
OUTPUT
5
TEST CASE 2

INPUT
4 1
3 10 2 9
7
OUTPUT
Bon Appetit
###############CODE###############
import java.util.Scanner;

public class TestClass {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();
        int items[] = new int[n];
        int annaTotal=0;
        
        for(int i=0;i<n;i++){
            items[i] = in.nextInt();
            if(k!=i){
                annaTotal += items[i];
            }
        }
        int chargedItem = in.nextInt();
        if((annaTotal/2)==chargedItem){
            System.out.println("Bon Appetit");
        }else{
            System.out.println(chargedItem-(annaTotal/2));
        }    
    }
}
-------------------------------------------------------------------------------
Sherlock and The Beast
QUESTION DESCRIPTION

Sherlock Holmes suspects his archenemy, Professor Moriarty, is once again plotting something diabolical. Sherlock's companion, Dr. Watson, suggests Moriarty may be responsible for MI6's recent issues with their supercomputer, The Beast.
Shortly after resolving to investigate, Sherlock receives a note from Moriarty boasting about infecting The Beast with a virus; however, he also gives him a cluea number,N . Sherlock determines the key to removing the virus is to find the largest Decent Number having N digits.
A Decent Number has the following properties:
1. Its digits can only be 3's and/or 5's.
2. The number of 3's it contains is divisible by 5.
3. The number of 5's it contains is divisible by 3.
4. If there are more than one such number, we pick the largest one.
Moriarty's virus shows a clock counting down to The Beast's destruction, and time is running out fast. Your task is to help Sherlock find the key before The Beast is destroyed!
Constraints
1<=T<=20
1<=N<=100000

Input Format
The first line is an integer, T , denoting the number of test cases.
The T subsequent lines each contain an integer,N , detailing the number of digits in the number.
Output Format
Print the largest Decent Number having digits; if no such number exists, tell Sherlock by printing -1.
TEST CASE 1

INPUT
4
1
3
5
11
OUTPUT
-1
555
33333
55555533333
###############CODE###############
import java.io.*;
import java.util.*;

public class TestClass {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int T = input.nextInt();
        StringBuilder output = new StringBuilder("");
        
        tests: 
        for(int t = 0; t < T; t++)
        {
            int n = input.nextInt();
            StringBuilder decentNumber = new StringBuilder("");
            int fives = 0;
            int threes = 0;
            
            while(n > 0)
            {
                if(n % 3 == 0) //n is divisible by 3
                {
                    while(n > 0)
                    {
                        fives++;
                        n -= 3;
                    }
                }
                
                else if(n % 5 == 0) //n is divisible by 5
                {
                    threes++;
                    n -= 5;
                }
                else //n is not divisible by 3 or 5 
                {
                    fives++;
                    n -= 3;
                }
                
            }
            
            if(n < 0) //No decent number exist
                output.append("-1");
            else //Build the decent number
            {
                for(int i = 0; i < fives; i++)
                    output.append("555");
                for(int i = 0; i < threes; i++)
                    output.append("33333");
            }
            output.append("\n"); //Move to the next line of output
        }
        System.out.println(output);
    }
}
--------------------------------------------------------------------------------------
Permuting Two Arrays
QUESTION DESCRIPTION

Consider two -element arrays of integers, A=[a0,a1,...,an-1] and B=[b0,b1,...,bn-1] . You want to permute them into some A` and B` such that the relation a`i +b`i>=k holds for all i where 0<=i<=n . For example, if A=[0,1] , B[0,2] , and k=1, a valid A`,B` satisfying our relation would be A1=[1,0] and B`=[0,2] .
You are given q queries consisting of A,B , and k. For each query, print YES on a new line if some permutations A`, B` exist satisfying the relation above. If no valid permutations exist, print NO instead.
Input Format
The first line contains an integer,q , denoting the number of queries. The 3q subsequent lines describe each of the q queries in the following format:
1. The first line contains two space-separated integers describing the respective values of n (the size of arrays A and B ) and k (the relation variable).
2. The second line contains n space-separated integers describing the respective elements of array A .
3. The third line contains n space-separated integers describing the respective elements of array B.
Constraints
1<=q<=10
1<=n<=1000
1<=k<=109
0<=ai,bi<=109
Output Format
For each query, print YES on a new line if valid permutations exist; otherwise, print NO.
TEST CASE 1

INPUT
2
3 10
2 1 3
7 8 9
4 5
1 2 2 1
3 3 3 4
OUTPUT
YES
NO
###############CODE###############
import java.io.*;
import java.util.*;

public class TestClass {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int Q = input.nextInt();
        //Store answer to each query
        StringBuilder output = new StringBuilder("");

        queries:
        for(int q = 0; q < Q; q++)
        {
            int n = input.nextInt();
            int k = input.nextInt();
            
            //Initialize Input
            int[] A = new int[n];
            int[] B= new int[n];
            for(int i = 0; i < n; i++)
                A[i] = input.nextInt();
            for(int i = 0; i < n; i++)
                B[i] = input.nextInt();
            
            Arrays.sort(A);//Sort ascending
            Arrays.sort(B);//Sort acending      
          
            for(int i = 0; i < n; i++)
            {
                //Traverse A ascending and B descending
                if(A[i]+B[B.length-1-i] < k) //Failed check
                {
                    output.append("NO\n");
                    continue queries;
                }
            }
            
            //Permutation exist
            output.append("YES\n");
            
        }
        //Print the answers to all queries
        System.out.println(output);
    }
}
-------------------------------------------------------------------------------
